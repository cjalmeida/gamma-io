# Installation script for gamma-cli. This scripts automates installing the tool
# via `pipx`
#
# fmt: off

from pathlib import Path
import shutil
import subprocess
import sys
import os
import platform
import site
import traceback
import time
import textwrap
from shutil import which
from subprocess import CalledProcessError, run, DEVNULL, PIPE, CompletedProcess
from typing import List

# COLORS
red="\033[1;31m"
green="\033[1;32m"
yellow="\033[1;33m"

PYTHON_VERSIONS="3.10 3.9 3.8 3.7 3.6 3"
MIN_PYTHON_VERSION=(3,7)

_cannot_use = os.getenv("GAMMA_CLI_CANNOT_USE", "").split("|")

SPEC=os.getenv("GAMMA_CLI_SPEC", "gamma-cli")

os.environ["USE_EMOJI"] = "0"

def release():
    if 'windows' in platform.system().lower():
        return "windows"
    elif Path("/etc/system-release").exists():
        return "redhat"
    elif Path("/etc/lsb-release").exists():
        return "debian"
    return None

# enable ANSI color support in windows
nocolor = False
if release() == "windows":
    try:
        import ctypes
        kernel32 = ctypes.windll.kernel32
        kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
    except Exception:
        nocolor = True


def add_cannot_use(bin: str):
    _cannot_use.append(bin.lower())

def get_cannot_use() -> List[str]:
    return _cannot_use


def echo(msg: str, end="\n"):
    if nocolor:
        for cc in (red, green, yellow):
            msg = msg.replace(cc, "")
        print(msg, end=end)
    else:
        print(msg + "\033[0m", end=end)


def ensure_python(allow_current=True, raise_error=True) -> None:
    ver = (sys.version_info.major, sys.version_info.minor)
    if not allow_current or ver < MIN_PYTHON_VERSION:
        add_cannot_use(sys.executable)
        found, bin, version = find_python()
        if not found and raise_error:
            errmsg_notfound(bin, version)
            raise SystemExit(10)
        elif not found:
            return

        echo(f"Found compatible Python version at {bin}, replacing process.")
        replace_process(bin)


def replace_process(bin):
    env = os.environ.copy()
    env["GAMMA_CLI_TRACK"] = "|".join(get_cannot_use())
    if release() == "windows":
        os.spawnve(os.P_WAIT, bin, [bin, __file__], env)
        raise SystemExit(0)
    else:
        os.execvpe(bin, [bin, __file__], env)


def pyver():
    return f"{sys.version_info.major}.{sys.version_info.minor}"

def errmsg_notfound(bin, version):
    echo(f"Python at {sys.executable}, version {pyver()} is too old.")
    echo(f"Please install and run this script using a newer python version.")

    if os.getenv("CONDA_PYTHON_EXE"):
        echo(f"{yellow}Try: conda create -y -n pipx python>=3.7")
        echo(f"{yellow}     conda activate pipx")
        echo("")

    if release() == "redhat":
        echo(f"{yellow}Try: yum install python38")
        echo("")

    if release() == "debian":
        echo(f"{yellow}Try: apt install python3.8 python3.8-venv python3-pip")
        echo("")

def get_python_candidates():

    candidates = []

    def add_conda():
        if "CONDA_PYTHON_EXE" in os.environ:
            candidates.append((None, os.environ["CONDA_PYTHON_EXE"]))

    if release() == "windows":
        local = os.getenv("LOCALAPPDATA")
        if local:
            versions = [v.replace(".", "") for v in PYTHON_VERSIONS]
            candidates+=[(v, f"{local}\\Programs\\Python\\Python{v}\python.exe") for v in versions]
        add_conda()
        candidates+=[(None, "python.exe")]
    else:
        candidates+=[(v, "/usr/bin/python" + v) for v in PYTHON_VERSIONS.split()]
        candidates+=[(v, "/usr/local/bin/python" + v) for v in PYTHON_VERSIONS.split()]
        pyenv: Path = (Path.home() / ".pyenv/shims/python").absolute()
        if pyenv.exists():
            candidates.append((None, str(pyenv)))
        add_conda()
        candidates+=[(v, "python" + v) for v in PYTHON_VERSIONS.split()]

    return candidates

def find_python():
    from pathlib import Path
    pycheck="""
import sys
i = sys.version_info
(i.major != 3 or i.minor < 7) and sys.exit(50)
"""


    bin=None
    version=None
    found=False
    candidates = get_python_candidates()
    for v, _b in candidates:
        try:
            cp:CompletedProcess = run([_b, "-c", pycheck], stdout=DEVNULL, stderr=DEVNULL)
        except FileNotFoundError:
            cp = None

        if cp and cp.returncode == 0:
            if _b and not Path(_b).is_absolute():
                _b = which(_b)
            if _b not in get_cannot_use():
                bin = _b
                version = v
                found = True
                break

    return found, bin, version

def ensure_not_inside_venv():
    if os.getenv("NO_VENV_CHECK", "0") == "1":
        return

    if sys.prefix != sys.base_prefix:
        echo("")
        echo("Current Python is running inside a virtualenv!")
        echo("Looking for an alternative...")
        ensure_python(allow_current=False, raise_error=False)
        echo(f"{red}ERROR: running under a virtualenv. Run this script againt using "
        "your system python interpreter or set NO_VENV_CHECK=1 to ignore this check.")
        raise SystemExit(20)

    if os.getenv("CONDA_DEFAULT_ENV") == "pipx":
        # allow conda conda env named 'pipx'
        return

    conda_prefix = os.getenv("CONDA_PREFIX")
    if conda_prefix == sys.prefix:
        cmd = [os.environ["CONDA_PYTHON_EXE"], "-c", 'import sys; print(sys.prefix)']
        cp = run(cmd, stdout=PIPE, stderr=DEVNULL,check=True)
        base_prefix=cp.stdout.decode().strip()
        if conda_prefix != base_prefix:
            echo("")
            echo("Current Python is running inside a conda venv!")
            echo("Looking for an alternative...")
            ensure_python(allow_current=False, raise_error=False)
            echo("ERROR: Valid python found only inside a conda environment")
            echo("")
            echo("Installing pipx inside a random conda venv is not recommended.")
            echo(f"{yellow}We recommend you use the system python3 instead of conda")
            echo("If you prefer conda, create a dedicated 'pipx' conda environment and continue.")
            echo("Or set NO_VENV_CHECK=1 env variable to disable this check.")
            echo("")
            echo(f"Try: {yellow}conda create -y -n pipx -c conda-forge python>=3.7")
            echo(f"     {yellow}conda activate pipx")
            raise SystemExit(30)

def ensure_pip():
    try:
        import pip
    except ModuleNotFoundError as ex:
        if 'pip' not in ex.msg:
            raise
        else:
            errmsg_pip()
            raise SystemExit(40)

def ensure_venv():
    try:
        import ensurepip
    except ModuleNotFoundError as ex:
        if 'ensurepip' not in ex.msg:
            raise
        else:
            errmsg_venv()
            raise SystemExit(41)


def ensure_git():
    cmd = ["git", "--version"]
    try:
        cp = run(cmd, stdout=PIPE)
    except FileNotFoundError:
        cp = None
    if not cp or cp.returncode != 0:
        echo("")
        echo(f"{red}ERROR: Git is missing. Please install git!")
        raise SystemExit(45)

def ensure_pipx():
    # look for pipx in path
    pipx = which("pipx")
    if pipx:
        script = Path(pipx).read_text()
        bin = Path(script.splitlines()[0][2:]).absolute()
        return False

    # check if it's already installed in user-site scripts
    if release() == "windows":
        pipx = Path(site.getusersitepackages()).parent / "Scripts" / "pipx.exe"
    else:
        pipx = Path(site.getuserbase()) / "bin" / "pipx"

    if pipx.exists():
        return False
    else:
        echo("")
        echo(f"{yellow}Installing pipx")
        install_pipx()
        run([sys.executable, "-m", "pipx", "ensurepath", "--force"])
        return True

def pipx_env() -> dict:
    from pipx import constants
    from pipx.commands.ensure_path import get_pipx_user_bin_path

    paths = [constants.LOCAL_BIN_DIR]
    user_path = get_pipx_user_bin_path()
    if user_path is not None:
        paths.append(user_path)

    curpath = os.environ['PATH']
    sep = os.path.pathsep
    for path in paths:
        curpath = f"{path}{sep}{curpath}"

    env = os.environ.copy()
    env["PATH"] = curpath
    return env

def install_pipx():
    pip = ["install", "--user", "--no-input", "--force-reinstall", "-q", "pipx"]
    cmd = [sys.executable, "-m", "pip", *pip]
    env = os.environ.copy()
    env["PIP_NO_WARN_SCRIPT_LOCATION"] = "1"
    cp = run(cmd, env=env)
    if cp.returncode != 0:
        echo(f"{red}ERROR: could not install pipx. Check logs for error")
        raise SystemExit(50)
    sys.path.insert(0, site.USER_SITE)

def gamma_cli_venv() -> Path:
    from pipx.venv import VenvContainer
    from pipx.constants import PIPX_LOCAL_VENVS
    container = VenvContainer(PIPX_LOCAL_VENVS)
    venv: Path = container.get_venv_dir("gamma-cli")
    return venv.absolute()

def gamma_cli_installed():
    venv = gamma_cli_venv()
    if release() == "windows":
        bin = venv / "Scripts/gamma.exe"
    else:
        bin = venv / "bin/gamma"

    if not bin.exists():
        return False

    try:
        run([str(bin),  "--version"], stdout=DEVNULL, check=True)
        return True
    except FileNotFoundError:
        return False
    except CalledProcessError:
        echo(f"{yellow}Removing old gamma-cli installation")
        shutil.rmtree(venv)
        return False

def errmsg_pip():
    ver=pyver()
    echo(f"{red}ERROR: module 'pip' not found.")
    echo("")
    if release() == "debian":
        echo(f"This usually means you're missing the 'python3-pip' apt package in Ubuntu/Debian")
        echo(f"Try: {yellow}apt install python3-pip python3-venv")

    if release() == "redhat":
        echo(f"This usually means you're missing the 'python38-pip' apt package in RedHat/CentOS")
        echo(f"Try: {yellow}yum install python38 python38-pip")

def errmsg_venv():
    ver=pyver()
    echo(f"{red}ERROR: module 'venv' not found.")
    echo("")
    echo(f"This usually means you're missing the 'python3-venv' apt package in Ubuntu/Debian")
    if release() == "debian":
        echo(f"Try: {yellow}apt install python3-pip python3-venv")


def main():
    echo("Verifying Python... ", end="")
    ensure_python()
    echo("OK")

    # ensure base python
    echo("Checking not inside virtualenv...", end="")
    ensure_not_inside_venv()
    echo("OK")

    # ensure pip
    echo("Checking pip...", end="")
    ensure_pip()
    echo("OK")

    # ensure has venv
    echo("Checking venv available...", end="")
    ensure_venv()
    echo("OK")

    # ensure git
    echo("Checking git...", end="")
    ensure_git()
    echo("OK")

    # ensure pipx
    echo("Verifying pipx...", end="")
    new_pipx = ensure_pipx()
    if not new_pipx:
        echo("OK")

    env = pipx_env()

    if gamma_cli_installed():
        echo("Upgrading gamma-cli...")
        run([sys.executable, "-m", "pipx", "upgrade", "gamma-cli"], env=env, check=True)
        echo(f"{green}gamma-cli upgraded successfully!")
    else:
        echo("Install gamma-cli...")
        run([sys.executable, "-m", "pipx", "install", "--force", "--python", sys.executable, "gamma-cli"], env=env, check=True)
        echo(f"{green}gamma-cli installed successfully!")


    if new_pipx:
        echo("")
        echo(f"{yellow}You need to restart your shell/terminal in order to use gamma-cli")
        echo(f"Then, check gamma-cli options with {green}gamma --help")
    else:
        echo("")
        echo(f"Check gamma-cli options with {green}gamma --help")

def errmsg_unexpected():
    traceback.print_exc()
    echo("")
    echo(f"{red}ERROR: Unexpected error installing gamma-cli")
    echo(f"{red}       please check logs and report bugs to:")
    echo(f"    https://github.gamma.bcg.com/BCG/gamma-cli/issues")

if __name__ == "__main__":
    try:
        main()
    except CalledProcessError as ex:
        echo(f"command:")
        echo(f"    {ex.cmd}")
        echo(f"stdout:")
        echo(f"    {ex.stdout and ex.stdout.decode()}")
        echo(f"stderr:")
        echo(f"    {ex.stderr and ex.stderr.decode()}")
        errmsg_unexpected()
    except Exception as ex:
        if not isinstance(ex, SystemExit):
            errmsg_unexpected()
